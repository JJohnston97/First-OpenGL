#version 430 core

// Input per-fragment data
// These must correspond to the varying outputs from the vertex shader
in vec3 vNormalV;
in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;
in vec2 texCoord;


// Input uniform data - these have values that will be the same for every fragment
uniform vec3 lightColour = {0.8,0.8,0.8};
uniform vec3 emissiveColour = {1, 1, 1};
uniform vec3 ambientColour  = {0.5f, 0.5f, 0.5f};
uniform vec3 diffuseColour  = {1.0f, 1.0f, 1.0f};
uniform vec3 specularColour = {1.0f, 1.0f, 1.0f};
uniform float shininess     = 100.0f;
uniform float alpha         = 1.0f;

// The output of the fragment shader is the fragment's colour
out vec4 fragColour;

float facing(vec3 N, vec3 L)
{
if(dot(N,L) > 0)
	{
	return 1;				//Used for specular lighting
	}
return 0;
}

// This is another input to allow us to access a texture

uniform sampler2D tex1;		//Texture 1
uniform sampler2D tex2;		//Texture 2


void main()
{
	
	vec4 tex1Colour, tex2Colour, resColour;        //Creates 3 vec4's for texture 1 colour, texture 2 colour, resColour
	
	tex1Colour = texture2D(tex1, texCoord);		  //First Texture
	tex2Colour = texture2D(tex2, texCoord);		  //Second Texture
	
	resColour = mix(tex1Colour, tex2Colour, 0.4); //MultiTexture

	// Calculate the direction from the sample position to the light
	vec3 lightDir = normalize( eyeSpaceLightPosV - eyeSpaceVertPosV );
	
	// Ensure the normal is a unit vector
	vec3 normal = normalize( vNormalV );
	
	// Direction from eye to sample point
	vec3 eyeDir = normalize( -eyeSpaceVertPosV );
	
	// Vector half way between one to eye and one to light
	vec3 halfVec = normalize( eyeDir + lightDir );

	// Retrieve colour from texture
	vec3 texColour = vec3(texture(tex1,vec2(texCoord.x,1-texCoord.y)));
	
	// Calculate diffuse lighting
	vec3 diffuse = diffuseColour * lightColour * max( dot( normal, lightDir ), 0);
	

	vec3 H = normalize(lightDir + vec3 (0, 0, 1));	//Normalise for Specular Lighting

	vec3 specular = specularColour * lightColour * facing(normal, lightDir) * pow(max(dot(normal, H), 0), shininess);	//Specular light
	//vec3 specular = vec3(0);

	// Final colour uses the texture colour for all components
	// If you want a separate texture for specular you will need to change this
	
	fragColour = vec4( emissiveColour + resColour.xyz * (ambientColour + diffuse + specular), alpha);	//Multitexture
	
	//fragColour = vec4( emissiveColour + texColour*(ambientColour + diffuse + specular), alpha);
	//fragColour = resColour;

	
}
